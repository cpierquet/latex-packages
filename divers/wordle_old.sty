% Authors........: Andrew MATHAS & Cédric PIERQUET
% licence........: Released under the LaTeX Project Public License v1.3c or later, see http://www.latex-project.org/lppl.txt

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{wordle}[2024/08/09 v0.2.0 Wordle grid]
% 0.2.0		Merged work of Andrew & Cédric
% 0.1.1		Coorection d'un bug sur la version anglaise
% 0.1.0		Version initiale + quelques modèles

%------Used packages
\RequirePackage{tikz}
\RequirePackage{simplekv}
\RequirePackage{xstring}
\usepackage{expl3}
\ExplSyntaxOn

%------Version en de Andrew :-)
\providecommand \IfFormatAtLeastTF { \@ifl@t@r \fmtversion }

\IfFormatAtLeastTF { 2022-06-01 }
  { \ProcessKeyOptions [ wordle ] }
% ----------------------------------------------------------------
% Package options and their defaults

\bool_new:N \l__wordle_case_sensitive_bool % false by default
\bool_new:N \l__wordle_strict_bool         % false by default

\dim_new:N  \l__wordle_grid_dim
\dim_new:N  \l__wordle_sep_dim
\dim_new:N  \l__wordle_size_dim

\int_new:N  \l__wordle_rows_int

\tl_new:N   \l__wordle_border_tl
\tl_new:N   \l__wordle_correct_tl
\tl_new:N   \l__wordle_font_tl
\tl_new:N   \l__wordle_letterstyle_tl
\tl_new:N   \l__wordle_name_tl
\tl_new:N   \l__wordle_placed_tl
\tl_new:N   \l__wordle_shape_tl
\tl_new:N   \l__wordle_text_tl
\tl_new:N   \l__wordle_tikz_tl
\tl_new:N   \l__wordle_unmmarked_tl
\tl_new:N   \l__wordle_wrong_tl

% define keys
\keys_define:nn { wordle }
{
    % package options
    border         .tl_set:N   = \l__wordle_border_tl,
    correct        .tl_set:N   = \l__wordle_correct_tl,
    font           .tl_set:N   = \l__wordle_font_tl,
    letterstyle    .tl_set:N   = \l__wordle_letterstyle_tl,
    name           .tl_set:N   = \l__wordle_name_tl,
    placed         .tl_set:N   = \l__wordle_placed_tl,
    separation     .tl_set:N   = \l__wordle_sep_dim,
    shape          .tl_set:N   = \l__wordle_shape_tl,
    size           .tl_set:N   = \l__wordle_size_dim,
    text           .tl_set:N   = \l__wordle_text_tl,
    tikz           .tl_set:N   = \l__wordle_tikz_tl,
    empty          .tl_set:N   = \l__wordle_empty_tl,
    wrong          .tl_set:N   = \l__wordle_wrong_tl,
    rows           .int_set:N  = \l__wordle_rows_int,
    case~sensitive .bool_set:N = \l__wordle_case_sensitive_bool,
    case~sensitive .default:n  = true,
    strict         .bool_set:N = \l__wordle_strict_bool,
    strict         .default:n  = true,
    natural~case   .code:n     = { \cs_set_eq:NN \__wordle_letter:n \__wordle_letter_natural:n},
    lower~case     .code:n     = {
        \cs_set_eq:NN \__wordle_letter:n \__wordle_letter_lower:n
        \bool_set_false:N \l__wordle_case_sensitive_bool
    },
    upper~case     .code:n     = {
        \cs_set_eq:NN \__wordle_letter:n \__wordle_letter_upper:n
        \bool_set_false:N \l__wordle_case_sensitive_bool
    },
}

% default values for wordle settings
\RequirePackage[svgnames]{xcolor}
\keys_set:nn { wordle }
{
    border         = white,
    case~sensitive = false,
    correct        = ForestGreen!80!LimeGreen,
    font           = \bfseries,
    letterstyle    = ,
    name           = W,
    placed         = Gold!70!DarkGoldenrod,
    rows           = 0,
    separation     = 0.5mm,
    shape          = rectangle,
    size           = 7.0mm,
    strict         = false,
    text           = white,
    tikz           = ,
    empty          = OldLace,
    wrong          = Gray,
}

% ----------------------------------------------------------------
% just in case we're running an old version of latex
  {
    \RequirePackage     { l3keys2e }
    \ProcessKeysOptions { wordle  }
  }

% user settings
\NewDocumentCommand\WordleSetup{ m }{ \keys_set:nn { wordle } {#1} }

% ----------------------------------------------------------------
% Required packages

% define TikZ Wordle styles for the letters
\tikzset{/Wordle/.is~family,
  /Wordle,
    boxed~letter/.style = {
      /tikz,         % change back to tikz keys
      fill=#1,
      text=\l__wordle_text_tl,
      inner~sep=\l__wordle_sep_dim,
      minimum~height=\l__wordle_size_dim,
      minimum~size=\l__wordle_size_dim,
      draw=\l__wordle_border_tl,
      font=\l__wordle_font_tl,
      \l__wordle_shape_tl,
      thick,
    },
    border/.default  = \l__wordle_border_tl,
    border/.code     = {\tl_set:Nn \l__wordle_border_tl {#1}},
    correct/.style   = {boxed~letter=#1},
    correct/.default = \l__wordle_correct_tl,
    placed/.style    = {boxed~letter=#1},
    placed/.default  = \l__wordle_placed_tl,
    wrong/.style     = {boxed~letter=#1},
    wrong/.default   = \l__wordle_wrong_tl,
    empty/.style     = {boxed~letter=#1},
    empty/.default   = \l__wordle_empty_tl,
}

% processing of the wordle letters
\cs_set_nopar:Npn \__wordle_letter_natural:n #1 {#1}
\cs_set_nopar:Npn \__wordle_letter_lower:n   #1 { \str_lowercase:n {#1} }
\cs_set_nopar:Npn \__wordle_letter_upper:n   #1 { \str_uppercase:n {#1} }

% by default wordle letters are not processed
\cs_set_eq:NN \__wordle_letter:n \__wordle_letter_natural:n

% print a letter in a box
\cs_new_nopar:Npn \wordle__boxed_letter:nn #1#2
{
  \tl_set:No \l_tmpa_tl
  {
    \l__wordle_name_tl-\int_eval:n{1+\l__wordle_row_index_int}-\int_use:N\l__wordle_letter_index_int
  }

  \node[/Wordle,#1](\l_tmpa_tl) at ({\l__wordle_letter_index_int*\l__wordle_grid_dim},
                                    {-\l__wordle_row_index_int*\l__wordle_grid_dim})
                                   { \__wordle_letter:n {#2} };

  % if strict then check lengths
  \bool_if:NT \l__wordle_strict_bool
  {
    \int_compare:nNnT {\l__wordle_letter_index_int} > {\seq_count:N \l__wordle_answer_seq }
    {
        \draw[red,thick] (\tl_use:N\l_tmpa_tl.south~west)--(\tl_use:N\l_tmpa_tl.north~east);
    }
  }
}

\seq_new:N  \l__wordle_answer_seq         % the answer
\prop_new:N \l__wordle_answer_counts_prop % count letters in wordle
\seq_new:N  \l__wordle_solution_seq       % list of all words
\prop_new:N \l__wordle_word_counts_prop   % count letters in word
\int_new:N  \l__wordle_letter_index_int   % index of current letter in word
\int_new:N  \l__wordle_row_index_int      % TikZ row index in solution

% a conditional for non-negative prop counter in \l__wordle_word_counts_prop
\prg_new_protected_conditional:Npnn \if__wordle_letter_nonnegative:n #1 {TF}
{
    \prop_if_in:NnTF \l__wordle_word_counts_prop {#1}
      { % letter in in prop
        \prop_get:NnN \l__wordle_word_counts_prop {#1} \l_tmpa_tl
        \int_compare:nNnTF {\l_tmpa_tl} < {0}
          {\prg_return_false:} {\prg_return_true:}
      }
      {\prg_return_false:}
}

\cs_generate_variant:Nn  \str_if_eq:nVTF {xVTF}

% a conditional for comparing letters
\prg_new_protected_conditional:Npnn \if__wordle_letters_agree:n #1 {T, TF}
{
    \str_set:Nx \l_tmpa_str
      {\seq_item:Nn \l__wordle_answer_seq {\l__wordle_letter_index_int}}


    \bool_if:NTF \l__wordle_case_sensitive_bool
      {\str_if_eq:nVTF {#1} \l_tmpa_str {\prg_return_true:} {\prg_return_false:}}
      {\str_if_eq:xVTF {\str_uppercase:n{#1}} \l_tmpa_str {\prg_return_true:} {\prg_return_false:}}
}

% add #3 to <prop=#1>.#2
\cs_new_nopar:Npn \wordle__add_to_prop_counter:Nnn #1#2#3
{
    \prop_put_if_new:Nnn #1 {#2} {0}
    \prop_pop:NnN        #1 {#2} \l_tmp_a
    \prop_put:Nnx        #1 {#2} {\int_eval:n {#3+\l_tmp_a}}
}

% make \l__wordle_answer_counts_prop<x> = #x's in wordle_seq
\cs_new_nopar:Npn \wordle__count_letters_in_answer:n #1
{
    \wordle__add_to_prop_counter:Nnn \l__wordle_answer_counts_prop {#1} {1}
}

% first run: subtract correct matches from letter counts
\cs_new_nopar:Npn \wordle__count_letters_in_word:n #1
{
  \int_incr:N \l__wordle_letter_index_int
  \if__wordle_letters_agree:nT {#1}
     { \wordle__add_to_prop_counter:Nnn \l__wordle_word_counts_prop {#1} {-1} }
}

% on the second run we print a coloured wordle word
\cs_new_nopar:Npn \wordle__write_letters_in_word:n #1
{
  \int_incr:N \l__wordle_letter_index_int
  \if__wordle_letters_agree:nTF {#1}
      { \wordle__boxed_letter:nn {correct} {#1} }
      {
         % subtract 1 from the prop counter
         \wordle__add_to_prop_counter:Nnn \l__wordle_word_counts_prop {#1} {-1}
         % if the counter is non-negative this is a pseudo match
         \if__wordle_letter_nonnegative:nTF {#1}
            { \wordle__boxed_letter:nn {placed} {#1} }
            { \wordle__boxed_letter:nn {wrong}  {#1} }
      }
}

\cs_generate_variant:Nn \seq_set_split:Nnn {Nnx}
\cs_generate_variant:Nn \cs_set_nopar:Nn {NV}

% typeset the word "#1", colouring letters using the wordle convention
\cs_new_nopar:Npn \wordle__mark_word:n #1
{
  \str_if_eq:nnTF {#1} {*}
     {
        \cs_set_eq:NN \wordle__process_word:n \wordle__empty_word:n
     }
     {
       \prop_set_eq:NN \l__wordle_word_counts_prop \l__wordle_answer_counts_prop
       \tl_map_function:nN {#1} \wordle__count_letters_in_word:n
       \int_zero:N \l__wordle_letter_index_int
       \tl_map_function:nN {#1}  \wordle__write_letters_in_word:n

       % if strict then check lengths
       \bool_if:NT \l__wordle_strict_bool
       {
         \int_while_do:nNnn {\l__wordle_letter_index_int} < {\seq_count:N\l__wordle_answer_seq}
         {
           \int_incr:N \l__wordle_letter_index_int
           \wordle__boxed_letter:nn {wrong} {\c_space_tl}
         }
       }

       % increment the row index
       \int_incr:N \l__wordle_row_index_int
     }
}

% typeset the word "#1" by putting boxes around each letter
\cs_new_nopar:Npn \wordle__empty_word:n #1
{
    \tl_map_inline:nn {#1}
    {
      \int_incr:N \l__wordle_letter_index_int
      \wordle__boxed_letter:nn {empty,text=black}  {##1}
    }
    % if strict then check lengths
    \bool_if:NT \l__wordle_strict_bool
    {
      \int_while_do:nNnn {\l__wordle_letter_index_int} < {\seq_count:N\l__wordle_answer_seq}
      {
        \int_incr:N \l__wordle_letter_index_int
        \wordle__boxed_letter:nn {empty,text=black} {\c_space_tl}
      }
    }
    \int_incr:N \l__wordle_row_index_int
}

\cs_set_eq:NN \wordle__process_word:n \wordle__mark_word:n

\NewDocumentEnvironment{wordle}{ O{} m O{} b }
{
  % apply wordle environment options
  \WordleSetup{#1}
  \begin{tikzpicture}%[{\l__wordle_tikz_tl}]

    % apply any tikz settings -- we need to some expansion trickery to do this
    \exp_args:Nx \tikzset{\l__wordle_tikz_tl}
    \exp_args:Nx \tikzset{/Wordle/boxed~letter/.append~style={\l__wordle_letterstyle_tl}}

    % set grid dimension = box size + separation
    \dim_set:Nn \l__wordle_grid_dim {\l__wordle_size_dim+\l__wordle_sep_dim}

    % split the answer into letters
    \bool_if:NTF \l__wordle_case_sensitive_bool
      { \seq_set_split:Nnn \l__wordle_answer_seq {} {#2} }
      { \seq_set_split:Nnx \l__wordle_answer_seq {} {\str_uppercase:n {#2}} }

    % count the number of times letters appear in \l__wordle_answer_seq
    \prop_clear:N \l__wordle_answer_counts_prop
    \tl_map_function:nN {#2} \wordle__count_letters_in_answer:n

    % split the solution into words
    \regex_split:nnN {\s} {#4} \l__wordle_solution_seq

    % process the words
    \int_zero:N \l__wordle_row_index_int
    \seq_map_inline:Nn \l__wordle_solution_seq
    {
        \int_zero:N \l__wordle_letter_index_int
        \wordle__process_word:n {##1}
    }

    % if the number of rows has been set then add any required blank rows
    \int_while_do:nNnn {\l__wordle_row_index_int} < {\l__wordle_rows_int}
    {
        \int_zero:N \l__wordle_letter_index_int
        \int_while_do:nNnn {\l__wordle_letter_index_int} < {\seq_count:N\l__wordle_answer_seq}
        {
          \int_incr:N \l__wordle_letter_index_int
          \wordle__boxed_letter:nn {empty}  {\c_space_tl}
        }
        \int_incr:N \l__wordle_row_index_int
    }
    #3
  \end{tikzpicture}
}{}

%boite en [fr]
\cs_new:Npn \l__sutom_boite_lettre:nn #1#2#3
{
	\ifboolKV[SUTOM]{Lettres}%
	{%
		\tikz \draw[rounded~corners=\fpeval{#3*\SutomUnit}cm,draw=\SutomBorder,line~width=\SutomWidth~mm,fill=#1] (0,0) rectangle++ (\SutomUnit,\SutomUnit) node[midway,font=\SutomFonte,text=\SutomFonteColor,scale=\SutomUnit] {#2} ;
	}%
	{%
		\tikz \draw[rounded~corners=\fpeval{#3*\SutomUnit}cm,draw=\SutomBorder,line~width=\SutomWidth~mm,fill=#1] (0,0) rectangle++ (\SutomUnit,\SutomUnit) ;
	}%
}

\cs_new:Npn \l__sutom_boite_lettre_rond:nn #1#2#3#4
{
	\IfStrEq{\SutomStyle}{rond}
		{%
			\tikz {\draw[rounded~corners=\fpeval{#4*\SutomUnit}cm,draw=\SutomBorder,line~width=\SutomWidth~mm,fill=#1] (0,0) rectangle++ (\SutomUnit,\SutomUnit) ;
				\ifboolKV[SUTOM]{Lettres}%
				{%
					\draw[line~width=\SutomWidth~mm,draw=#2,fill=#2] ({0.5*\SutomUnit},{0.5*\SutomUnit}) circle[radius=\fpeval{0.5*\SutomUnit-0.1*\SutomWidth}] node[font=\SutomFonte,text=\SutomFonteColor,scale=\SutomUnit] {#3} ;
				}%
				{%
					\draw[line~width=\SutomWidth~mm,draw=#2,fill=#2] ({0.5*\SutomUnit},{0.5*\SutomUnit}) circle[radius=\fpeval{0.5*\SutomUnit-0.1*\SutomWidth}];
				}%
			}%
		}%
		{%
			\ifboolKV[SUTOM]{Lettres}%
			{%
				\tikz \draw[rounded~corners=\fpeval{#4*\SutomUnit}cm,line~width=0\SutomWidth~mm,draw=\SutomBorder,fill=#2] (0,0) rectangle++ (\SutomUnit,\SutomUnit) node[midway,font=\SutomFonte,text=\SutomFonteColor,scale=\SutomUnit] {#3} ;
			}%
			{%
				\tikz \draw[rounded~corners=\fpeval{#4*\SutomUnit}cm,line~width=\SutomWidth~mm,draw=\SutomBorder,fill=#2] (0,0) rectangle++ (\SutomUnit,\SutomUnit) ;
			}%
		}%
}

%boite en [en]
\cs_new:Npn \l__wordle_boite_lettre:nn #1#2#3
{
	\ifboolKV[WORDLE]{Letters}%
	{%
		\tikz \draw[rounded~corners=\fpeval{#3*\SutomUnit}cm,draw=\SutomBorder,line~width=\SutomWidth~mm,fill=#1] (0,0) rectangle++ (\SutomUnit,\SutomUnit) node[midway,font=\SutomFonte,text=\SutomFonteColor,scale=\SutomUnit] {#2} ;
	}%
	{%
		\tikz \draw[rounded~corners=\fpeval{#3*\SutomUnit}cm,draw=\SutomBorder,line~width=\SutomWidth~mm,fill=#1] (0,0) rectangle++ (\SutomUnit,\SutomUnit) ;
	}%
}

\cs_new:Npn \l__wordle_boite_lettre_rond:nn #1#2#3#4
{
	\IfStrEq{\SutomStyle}{default}
		{%
			\ifboolKV[WORDLE]{Letters}%
			{%
				\tikz \draw[rounded~corners=\fpeval{#4*\SutomUnit}cm,line~width=\SutomWidth~mm,draw=\SutomBorder,fill=#2] (0,0) rectangle++ (\SutomUnit,\SutomUnit) node[midway,font=\SutomFonte,text=\SutomFonteColor,scale=\SutomUnit] {#3} ;
			}%
			{%
				\tikz \draw[rounded~corners=\fpeval{#4*\SutomUnit}cm,line~width=\SutomWidth~mm,draw=\SutomBorder,fill=#2] (0,0) rectangle++ (\SutomUnit,\SutomUnit) ;
			}%
		}%
		{%
			\tikz {\draw[rounded~corners=\fpeval{#4*\SutomUnit}cm,draw=\SutomBorder,line~width=\SutomWidth~mm,fill=#1] (0,0) rectangle++ (\SutomUnit,\SutomUnit) ;
				\ifboolKV[WORDLE]{Letters}%
				{%
					\draw[line~width=\SutomWidth~mm,draw=#2,fill=#2] ({0.5*\SutomUnit},{0.5*\SutomUnit}) circle[radius=\fpeval{0.5*\SutomUnit-0.1*\SutomWidth}] node[font=\SutomFonte,text=\SutomFonteColor,scale=\SutomUnit] {#3} ;
				}%
				{%
					\draw[line~width=\SutomWidth~mm,draw=#2,fill=#2] ({0.5*\SutomUnit},{0.5*\SutomUnit}) circle[radius=\fpeval{0.5*\SutomUnit-0.1*\SutomWidth}];
				}%
			}%
		}%
}

\seq_new:N \l_wordle_seq   % the answer
\prop_new:N \l_wordle_prop % count letters in wordle
\seq_new:N \l_words_seq    % list of all words
\prop_new:N \l_word_prop   % count letters in word
\int_new:N \l_letter_int   % index of current letter in word

% a conditional for nonnegative prop counter in \l_word_prop
\prg_new_protected_conditional:Npnn \if_wordle_letter_nonnegative:n #1 {TF}
{
	\prop_if_in:NnTF \l_word_prop {#1}
	{ % letter in in prop
		\prop_get:NnN \l_word_prop {#1} \l_tmpa_tl
		\int_compare:nNnTF {\l_tmpa_tl} < {0}
		{\prg_return_false:} {\prg_return_true:}
	}
	{\prg_return_false:}
}

% a conditional for comparing letters
\prg_new_protected_conditional:Npnn \if_wordle_letters_agree:n #1 {T, TF}
{
	\str_set:Nx \l_tmpa_str {\seq_item:Nn \l_wordle_seq {\l_letter_int}}
	\str_if_eq:nVTF {#1} \l_tmpa_str {\prg_return_true:} {\prg_return_false:}
}

% add #3 to <prop=#1>.#2
\cs_new_protected:Npn \wordle__add_to_prop_counter:Nnn #1#2#3
{
	\prop_put_if_new:Nnn #1 {#2} {0}
	\prop_pop:NnN        #1 {#2} \l_tmp_a
	\prop_put:Nnx        #1 {#2} {\int_eval:n {#3+\l_tmp_a}}
}

% make \l_wordle_prop<x> = #x's in wordle_seq
\cs_new_protected:Npn \count_letters_in_wordle:n #1
{
	\wordle__add_to_prop_counter:Nnn \l_wordle_prop {#1} {1}%
}

% first run: subtract correct matches from letter counts
\cs_new:Npn \count_letters_in_word:n #1
{
	\int_incr:N \l_letter_int
	\if_wordle_letters_agree:nT {#1}
	{ \wordle__add_to_prop_counter:Nnn \l_word_prop {#1} {-1} }%
}

%commande [fr]
% on the second run we print a coloured wordle word
\cs_new:Npn \write_letters_in_word:n #1
{
	\int_incr:N \l_letter_int
	\if_wordle_letters_agree:nTF {#1}
	{ \l__sutom_boite_lettre:nn {\SutomBienPlacee}{#1}{\SutomRounded} }
	{
		% subtract 1 from the prop counter
		\wordle__add_to_prop_counter:Nnn \l_word_prop {#1} {-1}
		% if the counter is non-negative this is a pseudo match
		\if_wordle_letter_nonnegative:nTF {#1}
		{ \l__sutom_boite_lettre_rond:nn {\SutomCoulFond}{\SutomCoulMalPlacee}{#1}{\SutomRounded} }
		{ \l__sutom_boite_lettre:nn {\SutomCoulFond}{#1}{\SutomRounded} }
	}%
}

%commande [en]
% on the second run we print a coloured wordle word
\cs_new:Npn \write_letters_in_wordle:n #1
{
	\int_incr:N \l_letter_int
	\if_wordle_letters_agree:nTF {#1}
	{ \l__wordle_boite_lettre:nn {\SutomBienPlacee}{#1}{\SutomRounded} }
	{
		% subtract 1 from the prop counter
		\wordle__add_to_prop_counter:Nnn \l_word_prop {#1} {-1}
		% if the counter is non-negative this is a pseudo match
		\if_wordle_letter_nonnegative:nTF {#1}
		{ \l__wordle_boite_lettre_rond:nn {\SutomCoulFond}{\SutomCoulMalPlacee}{#1}{\SutomRounded} }
		{ \l__wordle_boite_lettre:nn {\SutomCoulFond}{#1}{\SutomRounded} }
	}%
}

%clés [fr]
\defKV[SUTOM]{%
	Couleurs=\def\SutomCouleurs{#1},%
	Arrondi=\def\SutomRounded{#1},%
	Unite=\def\SutomUnit{#1},%
	Police=\def\SutomFonte{#1},%
	CouleurLettres=\def\SutomFonteColor{#1},%
	Style=\def\SutomStyle{#1},%
	Epaisseur=\def\SutomWidth{#1},%
	CouleurBordure=\def\SutomBorder{#1}
}

\setKVdefault[SUTOM]{%
	Couleurs={cyan!75!black,yellow,red},%
	Arrondi=0.1,%
	Unite=1,%
	Police=\LARGE\bfseries\sffamily,%
	CouleurLettres=white,%
	Lettres=true,%
	Style=rond,%
	Epaisseur=0.25,%
	CouleurBordure=white
}

%environnement [fr]
\NewDocumentEnvironment{GrilleSutom}{ O{} m b }%
{%
	\restoreKV[SUTOM]%
	\setKV[SUTOM]{#1}%
	\StrBefore{\SutomCouleurs}{,}[\SutomCoulFond]%
	\StrBetween[1,2]{\SutomCouleurs}{,}{,}[\SutomCoulMalPlacee]%
	\StrBehind[2]{\SutomCouleurs}{,}[\SutomBienPlacee]%
	\StrLen{#2}[\SutomNbLettres]%
	\def\SutomLarg{\fpeval{1.01*\SutomUnit*\SutomNbLettres}}%
	\begin{minipage}{\SutomLarg~cm}
		\lineskip=0pt%
		\parindent=0pt%
		% split the answer into letters
		\seq_set_split:Nnn \l_wordle_seq {} {#2}
		% we need to count the number of times each letter appears in \l_wordle_seq
		\prop_clear:N \l_wordle_prop
		\tl_map_function:nN {#2} \count_letters_in_wordle:n
		% split the solution into words
		\regex_split:nnN {\s} {#3} \l_words_seq
		% process the words
		\seq_map_inline:Nn \l_words_seq
		{
			\int_zero:N \l_letter_int
			\prop_set_eq:NN \l_word_prop \l_wordle_prop
			\tl_map_function:nN {##1} \count_letters_in_word:n
			\int_zero:N \l_letter_int
			\tl_map_function:nN {##1} \write_letters_in_word:n
			\par
		}
}%
{%
	\end{minipage}%
}

%clés [en]
\definecolor{WordleBack}{HTML}{797D7F}
\definecolor{WordleBad}{HTML}{CAB557}
\definecolor{WordleGood}{HTML}{6AAB64}

\defKV[WORDLE]{%
	Colors=\def\SutomCouleurs{#1},%
	Rounded=\def\SutomRounded{#1},%
	Unit=\def\SutomUnit{#1},%
	Fonte=\def\SutomFonte{#1},%
	ColorLetters=\def\SutomFonteColor{#1},%
	Style=\def\SutomStyle{#1},%
	Thickness=\def\SutomWidth{#1},%
	BorderColor=\def\SutomBorder{#1}
}

\setKVdefault[WORDLE]{%
	Colors={WordleBack,WordleBad,WordleGood},%
	Rounded=0.1,%
	Unit=1,%
	Fonte=\LARGE\bfseries\sffamily,%
	CouleurLettres=white,%
	Letters=true,%
	Style=default,%
	Thick=0.25,%
	BorderColor=white
}

%environnement [en]
\NewDocumentEnvironment{WordleGrid}{ O{} m b }
{%
	\restoreKV[WORDLE]%
	\setKV[WORDLE]{#1}%
	\StrBefore{\SutomCouleurs}{,}[\SutomCoulFond]%
	\StrBetween[1,2]{\SutomCouleurs}{,}{,}[\SutomCoulMalPlacee]%
	\StrBehind[2]{\SutomCouleurs}{,}[\SutomBienPlacee]%
	\StrLen{#2}[\SutomNbLettres]%
	\def\SutomLarg{\fpeval{1.01*\SutomUnit*\SutomNbLettres}}%
	\begin{minipage}{\SutomLarg~cm}
		\parindent=0pt
		\lineskip=0pt
		% split the answer into letters
		\seq_set_split:Nnn \l_wordle_seq {} {#2}
		% we need to count the number of times each letter appears in \l_wordle_seq
		\prop_clear:N \l_wordle_prop
		\tl_map_function:nN {#2} \count_letters_in_wordle:n
		% split the solution into words
		\regex_split:nnN {\s} {#3} \l_words_seq
		% process the words
		\seq_map_inline:Nn \l_words_seq
		{
			\int_zero:N \l_letter_int
			\prop_set_eq:NN \l_word_prop \l_wordle_prop
			\tl_map_function:nN {##1} \count_letters_in_word:n
			\int_zero:N \l_letter_int
			\tl_map_function:nN {##1} \write_letters_in_wordle:n
			\par
		}
}%
{%
	\end{minipage}%
}

\ExplSyntaxOff

\endinput